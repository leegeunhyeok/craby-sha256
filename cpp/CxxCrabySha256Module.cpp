// Auto generated by Craby. DO NOT EDIT.
#include "CxxCrabySha256Module.hpp"
#include "cxx.h"
#include "bridging-generated.hpp"
#include <react/bridging/Bridging.h>

using namespace facebook;

namespace craby {
namespace crabysha256 {

CxxCrabySha256Module::CxxCrabySha256Module(
    std::shared_ptr<react::CallInvoker> jsInvoker)
    : TurboModule(CxxCrabySha256Module::kModuleName, jsInvoker) {
  // No signals
  callInvoker_ = std::move(jsInvoker);
  module_ = std::shared_ptr<craby::bridging::CrabySha256>(
    craby::bridging::createCrabySha256(reinterpret_cast<uintptr_t>(this)).into_raw(),
    [](craby::bridging::CrabySha256 *ptr) { rust::Box<craby::bridging::CrabySha256>::from_raw(ptr); }
  );
  threadPool_ = std::make_shared<craby::utils::ThreadPool>(10);
  methodMap_["digest"] = MethodMetadata{1, &CxxCrabySha256Module::digest};
}

CxxCrabySha256Module::~CxxCrabySha256Module() {
  invalidate();
}

void CxxCrabySha256Module::invalidate() {
  if (invalidated_.exchange(true)) {
    return;
  }

  invalidated_.store(true);
  listenersMap_.clear();

  // No signals

  // Shutdown thread pool
  threadPool_->shutdown();
}

jsi::Value CxxCrabySha256Module::digest(jsi::Runtime &rt,
                                react::TurboModule &turboModule,
                                const jsi::Value args[],
                                size_t count) {
  auto &thisModule = static_cast<CxxCrabySha256Module &>(turboModule);
  auto callInvoker = thisModule.callInvoker_;
  auto it_ = thisModule.module_;

  try {
    if (1 != count) {
      throw jsi::JSError(rt, "Expected 1 argument");
    }

    auto arg0$raw = args[0].asString(rt).utf8(rt);
    auto arg0 = rust::Str(arg0$raw.data(), arg0$raw.size());
    auto ret = craby::bridging::digest(*it_, arg0);

    return react::bridging::toJs(rt, ret);
  } catch (const jsi::JSError &err) {
    throw err;
  } catch (const std::exception &err) {
    throw jsi::JSError(rt, errorMessage(err));
  }
}

} // namespace crabysha256
} // namespace craby
