// Auto generated by Craby. DO NOT EDIT.
#pragma once

#include "ffi.rs.h"
#include "ThreadPool.hpp"
#include <ReactCommon/TurboModule.h>
#include <jsi/jsi.h>
#include <memory>

namespace craby {
namespace crabysha256 {

class JSI_EXPORT CxxCrabySha256Module : public facebook::react::TurboModule {
public:
  static constexpr const char *kModuleName = "CrabySha256";

  CxxCrabySha256Module(std::shared_ptr<facebook::react::CallInvoker> jsInvoker);
  ~CxxCrabySha256Module();

  void invalidate();
  static facebook::jsi::Value
  digest(facebook::jsi::Runtime &rt,
      facebook::react::TurboModule &turboModule,
      const facebook::jsi::Value args[], size_t count);

protected:
  std::shared_ptr<facebook::react::CallInvoker> callInvoker_;
  std::shared_ptr<craby::bridging::CrabySha256> module_;
  std::shared_ptr<ThreadPool> threadPool_;
  std::atomic<bool> invalidated_{false};
  std::atomic<size_t> nextListenerId_{0};
  std::mutex listenersMutex_;
  std::unordered_map<
    std::string,
    std::unordered_map<size_t, std::shared_ptr<facebook::jsi::Function>>>
    listenersMap_;
};

} // namespace crabysha256
} // namespace craby
